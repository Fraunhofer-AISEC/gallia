# SPDX-FileCopyrightText: AISEC Pentesting Team
#
# SPDX-License-Identifier: CC0-1.0

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "gallia"
version = "1.9.0"
description = "Extendable Pentesting Framework"
license = "Apache-2.0"
readme = "README.md"
documentation = "https://fraunhofer-aisec.github.io/gallia"
repository = "https://github.com/Fraunhofer-AISEC/gallia"
authors = ["AISEC Pentesting Team"]
maintainers = [
    "Stefan Tatschner <stefan.tatschner@aisec.fraunhofer.de>",
    "Tobias Specht <tobias.specht@aisec.fraunhofer.de>",
]
keywords = ["pentesting", "automotive", "uds"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: AsyncIO",
    "Operating System :: POSIX :: Linux",
]
packages = [
    { include = "gallia", from = "src" },
    { include = "cursed_hr", from = "src" },
    { include = "hr", from = "src" },
    { include = "opennetzteil", from = "src" },
]

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
aiofiles = ">=24.1.0,<25.0"
aiosqlite = ">=0.18"
argcomplete = ">=2,<4"
zstandard = ">=0.19"
tabulate = ">=0.9"
construct = "^2.10"
msgspec = ">=0.11,<0.19"
pydantic = "^2.0"
platformdirs = ">=2.6,<5.0"
more-itertools = "^10.3.0"
pydantic-argparse = { path = "vendor/pydantic-argparse", develop = true }

[tool.poetry.group.dev.dependencies]
Sphinx = "^8.0"
mypy = "^1.0"
pylsp-mypy = "^0.6"
pylsp-rope = "^0.1"
pytest = ">=7.1,<9.0"
pytest-asyncio = ">=0.20,<0.25"
python-lsp-server = "^1.5"
types-aiofiles = ">=23.1,<25.0"
types-tabulate = "^0.9"
myst-parser = ">=3.0.1,<4.1"
sphinx-rtd-theme = "^3.0"
reuse = "^5.0"
construct-typing = ">=0.5.2,<0.7.0"
pytest-cov = ">=4,<7"
ruff = ">=0.6,<0.8"

[tool.poetry.plugins."gallia_plugins"]
"uds" = "gallia.plugins.uds:UDSPlugin"
"xcp" = "gallia.plugins.xcp:XCPPlugin"

[tool.poetry.scripts]
"gallia" = "gallia.cli:main"
"netzteil" = "opennetzteil.cli:main"
"cursed-hr" = "cursed_hr.cursed_hr:main"
"hr" = "hr:main"

[tool.mypy]
strict = true
plugins = [
    "pydantic.mypy"
]

[tool.ruff]
target-version = "py311"
line-length = 100

[tool.ruff.lint]
select = [
    # TODO: Enable this
    # "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "ASYNC",# flake8-async
    "C4",   # flake8-comprehensions
    "E",    # pycodestlye
    "F",    # pyflakes
    "I",    # isort
    "PL",   # pylint
    "PTH",  # flake8-use-pathlib
    "RSE",  # flake8-raise
    "TID",  # flake8-tidy-imports
    "UP",   # pyupgrade
]
ignore = [
    "ASYNC109", # Async function definition with a timeout parameter
    "E402",     # Module level import not at top of file
    "E501",     # line length
    "PLR2004",  # magic value used in comparison
    "PLR0911",  # too many return statements
    "PLR0912",  # too many branches
    "PLR0913",  # too many arguments to function call
    "PLR0915",  # too many statements
    "PLC1901",  # empty string is falsey
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
    "error::UserWarning",
]
