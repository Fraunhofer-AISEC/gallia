#!/usr/bin/env bash

# SPDX-FileCopyrightText: AISEC Pentesting Team
#
# SPDX-License-Identifier: Apache-2.0

set -u
set -o pipefail

PENRUN_DEFAULT_ARGS=()
PENRUN_PIPE_COMMAND=()
PENRUN_COMPRESSION_COMMAND=("zstd" "-T0")
PENRUN_OUTPUT_EXTENSION=".zst"

EXIT_CODE_JOB_FAILED=1
EXIT_CODE_FAILED_FIRST=2

# https://www.freebsd.org/cgi/man.cgi?query=sysexits
EXIT_CODE_EX_USAGE=64
EXIT_CODE_EX_SOFTWARE=70

log() {
	printf "%s\n" "$*" >&2
}

die() {
	log "error: $*"
	exit "$EXIT_CODE_EX_SOFTWARE"
}

search_configs() {
	local global_conf="/etc/penrun/config.sh"
	if [[ -f "$global_conf" ]]; then
		export PENRUN_GLOBAL_CONF="$global_conf"
	fi

	local user_conf="$HOME/.config/penrun/config.sh"
	if [[ -f "$user_conf" ]]; then
		export PENRUN_USER_CONF="$user_conf"
	fi

	local git_root
	if git_root="$(git rev-parse --show-toplevel 2>/dev/null)"; then
		local git_root_conf="$git_root/.penrun.sh"
		if [[ -f "$git_root_conf" ]]; then
			export PENRUN_GIT_ROOT_CONF="$git_root_conf"
		fi
	fi

	local pwd_conf="$PWD/.penrun.sh"
	if [[ -f "$pwd_conf" ]]; then
		export PENRUN_PWD_CONF="$pwd_conf"
	fi
}

search_and_source_config() {
	search_configs

	if [[ -n "${PENRUN_PWD_CONF-}" ]]; then
		# shellcheck source=/dev/null
		source "$PENRUN_PWD_CONF"
		return 0
	fi
	if [[ -n "${PENRUN_GIT_ROOT_CONF-}" ]]; then
		# shellcheck source=/dev/null
		source "$PENRUN_GIT_ROOT_CONF"
		return 0
	fi
	if [[ -n "${PENRUN_USER_CONF-}" ]]; then
		# shellcheck source=/dev/null
		source "$PENRUN_USER_CONF"
		return 0
	fi
	if [[ -n "${PENRUN_GLOBAL_CONF-}" ]]; then
		# shellcheck source=/dev/null
		source "$PENRUN_GLOBAL_CONF"
		return 0
	fi
}

lock_or_wait() {
	if [[ -n "${PENRUN_LOCK-}" ]]; then
		mkdir -p "$(dirname "${PENRUN_LOCK}")" && touch "${PENRUN_LOCK}" 2>/dev/null
		exec 87<"${PENRUN_LOCK}"

		if ! flock -n 87; then
			echo "Could not aquire lock ${PENRUN_LOCK}"
			echo "Waiting ..."
			flock 87 || die "Lock cannot be aquired"
			echo "... aquired lock"
		fi
	fi
}

# $1: path
mkdir_if_not_exists() {
	if [[ ! -d "$1" ]]; then
		mkdir -p "$1"
	fi
}

# $1: name
isfunction() {
	if [[ "$(type -t "$1")" == "function" ]]; then
		return 0
	fi
	return 1
}

# $1: path
isabsolute() {
	if [[ "${1:0:1}" == "/" ]]; then
		return 0
	fi
	return 1
}

# Create META file in passed directory.
# $1  : artifacts dir
# $2  : exit_code
# $3  : start time
# $4…n: command
meta_create() {
	local filepath="$1/META.json"
	local exit_code="$2"
	local start_time="$3"
	local cmd
	local end_time
	shift 3

	cmd="$(printf ', \"%s\"' "$@")"
	cmd="[${cmd:2}]"
	end_time="$(date --iso-8601=seconds)"

	jq -n --argjson cmd "$cmd" \
		--argjson exit_code "$exit_code" \
		--arg start_time "$start_time" \
		--arg end_time "$end_time" \
		'{command: $cmd, start_time: $start_time, end_time: $end_time, exit_code: $exit_code}' \
		>"$filepath"
}

# $1   : artifacts dir
# $2…$n: command
run_hook() {
	local artifactsdir="$1"
	local raw_out
	shift 1

	if [[ "$1" == "pre_run" ]]; then
		raw_out="$artifactsdir/PRERUN_OUTPUT"
	elif [[ "$1" == "post_run" ]]; then
		raw_out="$artifactsdir/POSTRUN_OUTPUT"
	else
		die "BUG: invalid hook"
	fi

	"$@" | tee "$raw_out"
}

# $1   : skip_hooks
# $2   : use_default_args
# $3   : artifactsdir
# $4   : tag
# $5   : command fragment from stdin
# $6…$n: cmd
prepare_and_run_cmd() {
	local skip_hooks="$1"
	local use_default_args="$2"
	local artifactsdir="$3"
	local tag="$4"
	local fragment="$5"
	shift 5

	local scriptname
	scriptname="$(basename "$1")"
	# Strip the fileending here, otherwise a
	# tag might be stripped as well.
	scriptname="${scriptname%.*}"

	local cmd_escaped
	cmd_escaped="$(printf "%q " "$@")"

	if [[ -n "$tag" ]]; then
		scriptname="$scriptname-$tag"
	fi
	if [[ -z "${artifactsdir-}" ]]; then
		artifactsdir="${PENRUN_ARTIFACTS_BASE:-$PWD}/${scriptname}/run-$(date +%Y%m%d-%H%M%S.%N)"
	fi
	if isfunction "cmd_to_artifactsdir"; then
		if ! artifactsdir="$(cmd_to_artifactsdir "$artifactsdir" "$fragment" "$tag" "$cmd_escaped")"; then
			die "artifactsdir could not be built"
		fi
	fi
	if ! isabsolute "$artifactsdir"; then
		artifactsdir="$PWD/$artifactsdir"
	fi

	mkdir_if_not_exists "$artifactsdir"

	if ((!use_default_args)); then
		PENRUN_DEFAULT_ARGS=()
	fi

	# Environment variables PENRUN_COMMAND and PENRUN_ARTIFACTS
	# are scoped to the relevant run. Otherwise they would overwrite
	# themselves when batched mode with parallel jobs is used.
	if ((!skip_hooks)) && isfunction "pre_run"; then
		if ! PENRUN_COMMAND="$cmd_escaped" PENRUN_ARTIFACTS="$artifactsdir" \
			run_hook "$artifactsdir" "pre_run"; then
			die "pre_run hook failed"
		fi
	fi

	local ret
	PENRUN_COMMAND="$cmd_escaped" PENRUN_ARTIFACTS="$artifactsdir" run_cmd \
		"$artifactsdir" \
		"$@"
	ret="$?"

	if ((!skip_hooks)) && isfunction "post_run"; then
		if ! PENRUN_COMMAND="$cmd_escaped" PENRUN_ARTIFACTS="$artifactsdir" \
			run_hook "$artifactsdir" "post_run"; then
			die "error: post_run hook failed"
		fi
	fi

	return "$ret"
}

# Run a command in a subshell with SIGINT ignored.
# $1…$n: command
mask_sigint() {
	(
		trap '' SIGINT
		"$@"
	)
}

# $1   : artifacts dir
# $2…$n: command
run_cmd() {
	local cmd
	local latest
	local start
	local artifactsdir="$1"
	local raw_out="$artifactsdir/OUTPUT${PENRUN_OUTPUT_EXTENSION}"
	local envfile="$artifactsdir/ENV"
	latest="$(dirname "$artifactsdir")/LATEST"
	shift 1

	mkdir_if_not_exists "$artifactsdir"

	printenv >"$envfile"
	ln -sfnr "$artifactsdir" "$latest"

	start="$(date --iso-8601=seconds)"

	trap 'meta_create "$artifactsdir" "$?" "$start" "$@" "${PENRUN_DEFAULT_ARGS[@]}"; trap - RETURN' RETURN

	if (("${#PENRUN_PIPE_COMMAND[@]}" > 0)); then
		"$@" "${PENRUN_DEFAULT_ARGS[@]}" 2>&1 |
			mask_sigint tee -p >(mask_sigint "${PENRUN_COMPRESSION_COMMAND[@]}" >"$raw_out") |
			mask_sigint "${PENRUN_PIPE_COMMAND[@]}"
	else
		"$@" "${PENRUN_DEFAULT_ARGS[@]}" 2>&1 |
			mask_sigint tee -p >(mask_sigint "${PENRUN_COMPRESSION_COMMAND[@]}" >"$raw_out")
	fi
}

usage() {
	echo "penrun [-nsuh] [-C CMD] [-S SEC] [-T TPL] [-c FILE]"
	echo "       [-d DIR] [-e EXT] [-j JOBS] [-p CMD] [-t TAG] COMMAND"
	echo ""
	echo "options:"
	echo " -C CMD   Compression command for OUTPUT"
	echo " -S SEC   Sleep this time beetween jobs"
	echo " -T TPL   A command template for batch processing"
	echo " -c FILE  Use this config file exclusively"
	echo " -d DIR   Use artifactsdir DIR"
	echo " -e EXT   File extension for OUTPUT"
	echo " -j JOBS  In batch mode process these number of jobs at a time"
	echo " -n       Do not use DEFAULT_ARGS from config"
	echo " -p CMD   Pipe output through CMD"
	echo " -s       Skip hooks"
	echo " -t TAG   Add a tag to this run"
	echo " -u       Run until the first error occurs and exit"
	echo " -h       Show this page and exit."
}

dienocmd() {
	log "error: no command specified"
	exit "$EXIT_CODE_EX_USAGE"
}

main() {
	local artifactsdir=""
	local forced_config=""
	local jobs="1"
	local run_until="0"
	local skip_hooks="0"
	local sleep_time="0"
	local tag=""
	local template=""
	local use_default_args="1"

	while getopts "C:S:T:c:d:e:j:np:st:uh" arg; do
		case "$arg" in
		C) read -r -a PENRUN_COMPRESSION_COMMAND <<<"$OPTARG" ;;
		S) sleep_time="$OPTARG" ;;
		T) template="$OPTARG" ;;
		c) forced_config="$OPTARG" ;;
		d) artifactsdir="$OPTARG" ;;
		e) PENRUN_OUTPUT_EXTENSION="$OPTARG" ;;
		j) jobs="$OPTARG" ;;
		n) use_default_args=0 ;;
		p) read -r -a PENRUN_PIPE_COMMAND <<<"$OPTARG" ;;
		s) skip_hooks=1 ;;
		t) tag="$OPTARG" ;;
		u) run_until=1 ;;

		h) usage && exit 0 ;;
		*) usage && exit 1 ;;
		esac
	done
	shift $((OPTIND - 1))

	if [[ -n "$template" ]]; then
		if [[ "$template" =~ .*\" || "$template" =~ .*\' ]]; then
			die "-T must not contain any quotes!"
		fi
	fi

	local cmds
	if [[ ! -t 0 ]]; then
		mapfile -t cmds </dev/stdin

		# Allow the config or spawned programs to detect
		# wheather they are run in batched mode.
		export PENRUN_BATCHED=1
	else
		if (($# < 1)); then
			dienocmd
		fi
		local escaped
		escaped="$(printf "%q " "$@")"
		mapfile -t cmds <<<"$escaped"
	fi

	if [[ -n "$forced_config" ]]; then
		if [[ ! -f "$forced_config" && "$forced_config" != "/dev/null" ]]; then
			die "config does not exist"
		fi
		search_configs
		# shellcheck source=/dev/null
		source "$forced_config"
	else
		search_and_source_config
	fi

	lock_or_wait

	local r="0"
	local ret="0"
	local cur_jobs="0"
	local cmd
	for cmd in "${cmds[@]}"; do
		local cmd_arr
		local fragment

		if [[ -n "${PENRUN_BATCHED-}" ]]; then
			fragment="$cmd"
			# shellcheck disable=SC2059
			if [[ -n "$template" ]]; then
				cmd="$(printf "${template}" "$fragment")"
			fi
		else
			fragment="${cmd[0]}"
		fi

		# Omit -r in order to interpret escaped spaces.
		# shellcheck disable=SC2162
		read -a cmd_arr <<<"$cmd"

		if ((jobs > 1)); then
			log "Scheduling job '$cmd'."

			# Hooks are disabled for jobcontrol.
			# Enabled hooks might cause scary race conditions.
			# Further, with enabled job control the terminal output
			# is undesired.
			PENRUN_PIPE_COMMAND=()
			prepare_and_run_cmd \
				"1" \
				"$use_default_args" \
				"$artifactsdir" \
				"$tag" \
				"$fragment" \
				"${cmd_arr[@]}" >/dev/null &

			# Spawn jobs until the configured limit via -j
			# is reached. Then await them one at a time.
			cur_jobs="$((cur_jobs + 1))"
			if ((cur_jobs < jobs)); then
				continue
			fi

			wait -n
			cur_jobs="$((cur_jobs - 1))"
			log "Job terminated. Currently active jobs: $cur_jobs."
		else
			if [[ -n "${PENRUN_BATCHED-}" ]]; then
				log "Starting command '$cmd'."
			fi

			prepare_and_run_cmd \
				"$skip_hooks" \
				"$use_default_args" \
				"$artifactsdir" \
				"$tag" \
				"$fragment" \
				"${cmd_arr[@]}"
		fi

		ret="$?"

		if [[ -n "${PENRUN_BATCHED-}" ]]; then
			if ((run_until)) && ((ret != 0)); then
				return "$((-EXIT_CODE_FAILED_FIRST))"
			elif ((ret != 0)); then
				r="$((-EXIT_CODE_JOB_FAILED))"
			fi
		fi

		sleep "$sleep_time"
	done

	# Cleanup leftover jobs.
	while ((cur_jobs > 0)); do
		wait -n
		cur_jobs="$((cur_jobs - 1))"
		log "Job terminated. Currently active jobs: $cur_jobs."
		if ((run_until)) && ((ret != 0)); then
			return "$((-EXIT_CODE_FAILED_FIRST))"
		elif ((ret != 0)); then
			r="$((-EXIT_CODE_JOB_FAILED))"
		fi
	done

	if ((r != 0)); then
		ret="$r"
	fi

	return "$ret"
}

main "$@"
